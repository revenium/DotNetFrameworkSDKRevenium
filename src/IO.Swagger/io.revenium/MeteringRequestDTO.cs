/* 
 * Revenium Metering API
 *
 * Revenium Metering API
 *
 * OpenAPI spec version: 1.14.0-SNAPSHOT
 * Contact: info@revenium.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.io.revenium
{
    /// <summary>
    /// MeteringRequestDTO
    /// </summary>
    [DataContract]
        public partial class MeteringRequestDTO :  IEquatable<MeteringRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MeteringRequestDTO" /> class.
        /// </summary>
        /// <param name="api">api.</param>
        /// <param name="subscription">The Product Key ID.</param>
        /// <param name="subscriberCredential">The Application ID.</param>
        /// <param name="method">The HTTP method being invoked (required).</param>
        /// <param name="url">The HTTP URL being invoked.</param>
        /// <param name="metadata">Additional billing metadata (supports numeric values and comma-seperated key-value pairs).</param>
        /// <param name="backendLatency">Backend API response time.</param>
        /// <param name="gatewayLatency">Latency introduced by the API GW.</param>
        /// <param name="responseCode">Backend HTTP response code (required).</param>
        /// <param name="timedOut">Whether or not the backend timed out.</param>
        /// <param name="requestMessageSize">The size of the API request in bytes.</param>
        /// <param name="responseMessageSize">The size of the API response in bytes.</param>
        /// <param name="requestHeaders">The comma seperated list of names of the headers in the request (required).</param>
        /// <param name="responseHeaders">The comma seperated list of names of the headers in the response (required).</param>
        /// <param name="userAgent">The HTTP User Agent.</param>
        /// <param name="remoteUser">The Remote User.</param>
        /// <param name="remoteHost">The Remote Host.</param>
        /// <param name="httpProtocol">The HTTP Protocol.</param>
        /// <param name="contentType">The Content Type.</param>
        /// <param name="correlationId">The Correlation ID.</param>
        /// <param name="platformAPIKey">platformAPIKey (required).</param>
        /// <param name="elements">Dynamic metering elements (required).</param>
        /// <param name="source">the source of the event.</param>
        public MeteringRequestDTO(string api = default(string), string subscription = default(string), string subscriberCredential = default(string), string method = default(string), string url = default(string), string metadata = default(string), double? backendLatency = default(double?), double? gatewayLatency = default(double?), int? responseCode = default(int?), bool? timedOut = default(bool?), long? requestMessageSize = default(long?), long? responseMessageSize = default(long?), List<string> requestHeaders = default(List<string>), List<string> responseHeaders = default(List<string>), string userAgent = default(string), string remoteUser = default(string), string remoteHost = default(string), string httpProtocol = default(string), string contentType = default(string), string correlationId = default(string), string platformAPIKey = default(string), List<ElementDTO> elements = default(List<ElementDTO>), string source = default(string))
        {
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new InvalidDataException("method is a required property for MeteringRequestDTO and cannot be null");
            }
            else
            {
                this.Method = method;
            }
            // to ensure "responseCode" is required (not null)
            if (responseCode == null)
            {
                throw new InvalidDataException("responseCode is a required property for MeteringRequestDTO and cannot be null");
            }
            else
            {
                this.ResponseCode = responseCode;
            }
            // to ensure "requestHeaders" is required (not null)
            if (requestHeaders == null)
            {
                throw new InvalidDataException("requestHeaders is a required property for MeteringRequestDTO and cannot be null");
            }
            else
            {
                this.RequestHeaders = requestHeaders;
            }
            // to ensure "responseHeaders" is required (not null)
            if (responseHeaders == null)
            {
                throw new InvalidDataException("responseHeaders is a required property for MeteringRequestDTO and cannot be null");
            }
            else
            {
                this.ResponseHeaders = responseHeaders;
            }
            // to ensure "platformAPIKey" is required (not null)
            if (platformAPIKey == null)
            {
                throw new InvalidDataException("platformAPIKey is a required property for MeteringRequestDTO and cannot be null");
            }
            else
            {
                this.PlatformAPIKey = platformAPIKey;
            }
            // to ensure "elements" is required (not null)
            if (elements == null)
            {
                throw new InvalidDataException("elements is a required property for MeteringRequestDTO and cannot be null");
            }
            else
            {
                this.Elements = elements;
            }
            this.Api = api;
            this.ProductKey = productKey;
            this.Application = application;
            this.Url = url;
            this.Metadata = metadata;
            this.BackendLatency = backendLatency;
            this.GatewayLatency = gatewayLatency;
            this.TimedOut = timedOut;
            this.RequestMessageSize = requestMessageSize;
            this.ResponseMessageSize = responseMessageSize;
            this.UserAgent = userAgent;
            this.RemoteUser = remoteUser;
            this.RemoteHost = remoteHost;
            this.HttpProtocol = httpProtocol;
            this.ContentType = contentType;
            this.CorrelationId = correlationId;
            this.Source = source;
        }
        
        /// <summary>
        /// Gets or Sets Api
        /// </summary>
        [DataMember(Name="api", EmitDefaultValue=false)]
        public string Api { get; set; }

        /// <summary>
        /// The Product Key ID
        /// </summary>
        /// <value>The Product Key ID</value>
        [DataMember(Name="productKey", EmitDefaultValue=false)]
        public string Subscription { get; set; }

        /// <summary>
        /// The Application ID
        /// </summary>
        /// <value>The Application ID</value>
        [DataMember(Name = "application", EmitDefaultValue = false)]
        public string SubscriberCredential { get; set; }

        /// <summary>
        /// The HTTP method being invoked
        /// </summary>
        /// <value>The HTTP method being invoked</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// The HTTP URL being invoked
        /// </summary>
        /// <value>The HTTP URL being invoked</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Additional billing metadata (supports numeric values and comma-seperated key-value pairs)
        /// </summary>
        /// <value>Additional billing metadata (supports numeric values and comma-seperated key-value pairs)</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Backend API response time
        /// </summary>
        /// <value>Backend API response time</value>
        [DataMember(Name="backendLatency", EmitDefaultValue=false)]
        public double? BackendLatency { get; set; }

        /// <summary>
        /// Latency introduced by the API GW
        /// </summary>
        /// <value>Latency introduced by the API GW</value>
        [DataMember(Name="gatewayLatency", EmitDefaultValue=false)]
        public double? GatewayLatency { get; set; }

        /// <summary>
        /// Backend HTTP response code
        /// </summary>
        /// <value>Backend HTTP response code</value>
        [DataMember(Name="responseCode", EmitDefaultValue=false)]
        public int? ResponseCode { get; set; }

        /// <summary>
        /// Whether or not the backend timed out
        /// </summary>
        /// <value>Whether or not the backend timed out</value>
        [DataMember(Name="timedOut", EmitDefaultValue=false)]
        public bool? TimedOut { get; set; }

        /// <summary>
        /// The size of the API request in bytes
        /// </summary>
        /// <value>The size of the API request in bytes</value>
        [DataMember(Name="requestMessageSize", EmitDefaultValue=false)]
        public long? RequestMessageSize { get; set; }

        /// <summary>
        /// The size of the API response in bytes
        /// </summary>
        /// <value>The size of the API response in bytes</value>
        [DataMember(Name="responseMessageSize", EmitDefaultValue=false)]
        public long? ResponseMessageSize { get; set; }

        /// <summary>
        /// The comma seperated list of names of the headers in the request
        /// </summary>
        /// <value>The comma seperated list of names of the headers in the request</value>
        [DataMember(Name="requestHeaders", EmitDefaultValue=false)]
        public List<string> RequestHeaders { get; set; }

        /// <summary>
        /// The comma seperated list of names of the headers in the response
        /// </summary>
        /// <value>The comma seperated list of names of the headers in the response</value>
        [DataMember(Name="responseHeaders", EmitDefaultValue=false)]
        public List<string> ResponseHeaders { get; set; }

        /// <summary>
        /// The HTTP User Agent
        /// </summary>
        /// <value>The HTTP User Agent</value>
        [DataMember(Name="userAgent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// The Remote User
        /// </summary>
        /// <value>The Remote User</value>
        [DataMember(Name="remoteUser", EmitDefaultValue=false)]
        public string RemoteUser { get; set; }

        /// <summary>
        /// The Remote Host
        /// </summary>
        /// <value>The Remote Host</value>
        [DataMember(Name="remoteHost", EmitDefaultValue=false)]
        public string RemoteHost { get; set; }

        /// <summary>
        /// The HTTP Protocol
        /// </summary>
        /// <value>The HTTP Protocol</value>
        [DataMember(Name="httpProtocol", EmitDefaultValue=false)]
        public string HttpProtocol { get; set; }

        /// <summary>
        /// The Content Type
        /// </summary>
        /// <value>The Content Type</value>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// The Correlation ID
        /// </summary>
        /// <value>The Correlation ID</value>
        [DataMember(Name="correlationId", EmitDefaultValue=false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// platformAPIKey
        /// </summary>
        /// <value>platformAPIKey</value>
        [DataMember(Name="platformAPIKey", EmitDefaultValue=false)]
        public string PlatformAPIKey { get; set; }

        /// <summary>
        /// Dynamic metering elements
        /// </summary>
        /// <value>Dynamic metering elements</value>
        [DataMember(Name="elements", EmitDefaultValue=false)]
        public List<ElementDTO> Elements { get; set; }

        /// <summary>
        /// the source of the event
        /// </summary>
        /// <value>the source of the event</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeteringRequestDTO {\n");
            sb.Append("  Api: ").Append(Api).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("  SubscriberCredential: ").Append(SubscriberCredential).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  BackendLatency: ").Append(BackendLatency).Append("\n");
            sb.Append("  GatewayLatency: ").Append(GatewayLatency).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  TimedOut: ").Append(TimedOut).Append("\n");
            sb.Append("  RequestMessageSize: ").Append(RequestMessageSize).Append("\n");
            sb.Append("  ResponseMessageSize: ").Append(ResponseMessageSize).Append("\n");
            sb.Append("  RequestHeaders: ").Append(RequestHeaders).Append("\n");
            sb.Append("  ResponseHeaders: ").Append(ResponseHeaders).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  RemoteUser: ").Append(RemoteUser).Append("\n");
            sb.Append("  RemoteHost: ").Append(RemoteHost).Append("\n");
            sb.Append("  HttpProtocol: ").Append(HttpProtocol).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  PlatformAPIKey: ").Append(PlatformAPIKey).Append("\n");
            sb.Append("  Elements: ").Append(Elements).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeteringRequestDTO);
        }

        /// <summary>
        /// Returns true if MeteringRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MeteringRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeteringRequestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Api == input.Api ||
                    (this.Api != null &&
                    this.Api.Equals(input.Api))
                ) && 
                (
                    this.Subscription== input.Subscription ||
                    (this.Subscription != null &&
                    this.Subscription.Equals(input.Subscription))
                ) && 
                (
                    this.SubscriberCredential == input.SubscriberCredential ||
                    (this.SubscriberCredential != null &&
                    this.SubscriberCredential.Equals(input.SubscriberCredential))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.BackendLatency == input.BackendLatency ||
                    (this.BackendLatency != null &&
                    this.BackendLatency.Equals(input.BackendLatency))
                ) && 
                (
                    this.GatewayLatency == input.GatewayLatency ||
                    (this.GatewayLatency != null &&
                    this.GatewayLatency.Equals(input.GatewayLatency))
                ) && 
                (
                    this.ResponseCode == input.ResponseCode ||
                    (this.ResponseCode != null &&
                    this.ResponseCode.Equals(input.ResponseCode))
                ) && 
                (
                    this.TimedOut == input.TimedOut ||
                    (this.TimedOut != null &&
                    this.TimedOut.Equals(input.TimedOut))
                ) && 
                (
                    this.RequestMessageSize == input.RequestMessageSize ||
                    (this.RequestMessageSize != null &&
                    this.RequestMessageSize.Equals(input.RequestMessageSize))
                ) && 
                (
                    this.ResponseMessageSize == input.ResponseMessageSize ||
                    (this.ResponseMessageSize != null &&
                    this.ResponseMessageSize.Equals(input.ResponseMessageSize))
                ) && 
                (
                    this.RequestHeaders == input.RequestHeaders ||
                    this.RequestHeaders != null &&
                    input.RequestHeaders != null &&
                    this.RequestHeaders.SequenceEqual(input.RequestHeaders)
                ) && 
                (
                    this.ResponseHeaders == input.ResponseHeaders ||
                    this.ResponseHeaders != null &&
                    input.ResponseHeaders != null &&
                    this.ResponseHeaders.SequenceEqual(input.ResponseHeaders)
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                ) && 
                (
                    this.RemoteUser == input.RemoteUser ||
                    (this.RemoteUser != null &&
                    this.RemoteUser.Equals(input.RemoteUser))
                ) && 
                (
                    this.RemoteHost == input.RemoteHost ||
                    (this.RemoteHost != null &&
                    this.RemoteHost.Equals(input.RemoteHost))
                ) && 
                (
                    this.HttpProtocol == input.HttpProtocol ||
                    (this.HttpProtocol != null &&
                    this.HttpProtocol.Equals(input.HttpProtocol))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.PlatformAPIKey == input.PlatformAPIKey ||
                    (this.PlatformAPIKey != null &&
                    this.PlatformAPIKey.Equals(input.PlatformAPIKey))
                ) && 
                (
                    this.Elements == input.Elements ||
                    this.Elements != null &&
                    input.Elements != null &&
                    this.Elements.SequenceEqual(input.Elements)
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Api != null)
                    hashCode = hashCode * 59 + this.Api.GetHashCode();
                if (this.Subscription != null)
                    hashCode = hashCode * 59 + this.Subscription.GetHashCode();
                if (this.SubscriberCredential != null)
                    hashCode = hashCode * 59 + this.SubscriberCredential.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.BackendLatency != null)
                    hashCode = hashCode * 59 + this.BackendLatency.GetHashCode();
                if (this.GatewayLatency != null)
                    hashCode = hashCode * 59 + this.GatewayLatency.GetHashCode();
                if (this.ResponseCode != null)
                    hashCode = hashCode * 59 + this.ResponseCode.GetHashCode();
                if (this.TimedOut != null)
                    hashCode = hashCode * 59 + this.TimedOut.GetHashCode();
                if (this.RequestMessageSize != null)
                    hashCode = hashCode * 59 + this.RequestMessageSize.GetHashCode();
                if (this.ResponseMessageSize != null)
                    hashCode = hashCode * 59 + this.ResponseMessageSize.GetHashCode();
                if (this.RequestHeaders != null)
                    hashCode = hashCode * 59 + this.RequestHeaders.GetHashCode();
                if (this.ResponseHeaders != null)
                    hashCode = hashCode * 59 + this.ResponseHeaders.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                if (this.RemoteUser != null)
                    hashCode = hashCode * 59 + this.RemoteUser.GetHashCode();
                if (this.RemoteHost != null)
                    hashCode = hashCode * 59 + this.RemoteHost.GetHashCode();
                if (this.HttpProtocol != null)
                    hashCode = hashCode * 59 + this.HttpProtocol.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                if (this.PlatformAPIKey != null)
                    hashCode = hashCode * 59 + this.PlatformAPIKey.GetHashCode();
                if (this.Elements != null)
                    hashCode = hashCode * 59 + this.Elements.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
